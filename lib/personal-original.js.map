{"version":3,"file":"personal-original.js","names":["reporter","context","options","Syntax","getSource","RuleError","report","fixer","locator","rule代名詞漢字書き","代名詞漢字書き","Paragraph","node","text","length","slice","sentences","split","forEach","sentence","type","raw","ruleError","start","loc","Str","results","pushError","error","push","tokenize","then","tokens","token","module","exports","linter"],"sources":["../src/personal-original.js"],"sourcesContent":["import { tokenize } from \"kuromojin\";\r\nimport { split, Syntax } from \"sentence-splitter\";\r\nimport 代名詞漢字書き from \"./rules/rule-define\"\r\n\r\nconst reporter = (context, options = {}) => {\r\n    const { Syntax, getSource, RuleError, report, fixer, locator } = context;\r\n\r\n    // Only the first rule in `rule-define.js` is required, the other rules will be executed automatically.\r\n    const rule代名詞漢字書き = 代名詞漢字書き(context);\r\n\r\n    return {\r\n        [Syntax.Paragraph](node) {\r\n            const text = getSource(node);\r\n\r\n            // Check paragraph length.\r\n            if(text.length > 120){\r\n                return new RuleError(`1段落長さが120文字超えている: ${text.slice(0, 10) + '...'}`);\r\n            }\r\n\r\n            // Check every sentences length.\r\n            var sentences = split(text);\r\n            sentences.forEach(sentence => {\r\n                if(sentence.type === \"Sentence\" && sentence.raw.length > 40){\r\n                    const ruleError = new RuleError(`1文長さが40文字超えている: ${sentence.raw.slice(0, 10) + '...'}`, {\r\n                        start: sentence.loc.start\r\n                    });\r\n                    report(node, ruleError); \r\n                }\r\n            });\r\n        },\r\n        [Syntax.Str](node) {\r\n            const text = getSource(node);\r\n            const results = [];\r\n            const pushError = (error) => {\r\n                if (error) {\r\n                    results.push(error);\r\n                }\r\n            };\r\n\r\n            return tokenize(text).then((tokens) => {\r\n                tokens.forEach((token) => {\r\n                    pushError(rule代名詞漢字書き(token));\r\n                    // pushError(rule副詞漢字書き(token));\r\n                    // pushError(rule接続詞かな書き(token));\r\n                    // pushError(rule名詞送り仮名(token));\r\n                });\r\n            }).then(()=> {\r\n                results.forEach(error => {\r\n                    report(node, error);\r\n                })\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nmodule.exports = {\r\n    linter: reporter,\r\n    fixer: reporter\r\n};"],"mappings":";;AAAA;AACA;AACA;AAAyC;AAEzC,IAAMA,QAAQ,GAAG,SAAXA,QAAQ,CAAIC,OAAO,EAAmB;EAAA,IAAjBC,OAAO,uEAAG,CAAC,CAAC;EACnC,IAAM;IAAEC,MAAM;IAAEC,SAAS;IAAEC,SAAS;IAAEC,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGP,OAAO;;EAExE;EACA,IAAMQ,WAAW,GAAG,IAAAC,mBAAO,EAACT,OAAO,CAAC;EAEpC,OAAO;IACH,CAACE,MAAM,CAACQ,SAAS,EAAEC,IAAI,EAAE;MACrB,IAAMC,IAAI,GAAGT,SAAS,CAACQ,IAAI,CAAC;;MAE5B;MACA,IAAGC,IAAI,CAACC,MAAM,GAAG,GAAG,EAAC;QACjB,OAAO,IAAIT,SAAS,yFAAsBQ,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,EAAG;MAC1E;;MAEA;MACA,IAAIC,SAAS,GAAG,IAAAC,uBAAK,EAACJ,IAAI,CAAC;MAC3BG,SAAS,CAACE,OAAO,CAACC,QAAQ,IAAI;QAC1B,IAAGA,QAAQ,CAACC,IAAI,KAAK,UAAU,IAAID,QAAQ,CAACE,GAAG,CAACP,MAAM,GAAG,EAAE,EAAC;UACxD,IAAMQ,SAAS,GAAG,IAAIjB,SAAS,kFAAoBc,QAAQ,CAACE,GAAG,CAACN,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAI;YACpFQ,KAAK,EAAEJ,QAAQ,CAACK,GAAG,CAACD;UACxB,CAAC,CAAC;UACFjB,MAAM,CAACM,IAAI,EAAEU,SAAS,CAAC;QAC3B;MACJ,CAAC,CAAC;IACN,CAAC;IACD,CAACnB,MAAM,CAACsB,GAAG,EAAEb,IAAI,EAAE;MACf,IAAMC,IAAI,GAAGT,SAAS,CAACQ,IAAI,CAAC;MAC5B,IAAMc,OAAO,GAAG,EAAE;MAClB,IAAMC,SAAS,GAAIC,KAAK,IAAK;QACzB,IAAIA,KAAK,EAAE;UACPF,OAAO,CAACG,IAAI,CAACD,KAAK,CAAC;QACvB;MACJ,CAAC;MAED,OAAO,IAAAE,mBAAQ,EAACjB,IAAI,CAAC,CAACkB,IAAI,CAAEC,MAAM,IAAK;QACnCA,MAAM,CAACd,OAAO,CAAEe,KAAK,IAAK;UACtBN,SAAS,CAAClB,WAAW,CAACwB,KAAK,CAAC,CAAC;UAC7B;UACA;UACA;QACJ,CAAC,CAAC;MACN,CAAC,CAAC,CAACF,IAAI,CAAC,MAAK;QACTL,OAAO,CAACR,OAAO,CAACU,KAAK,IAAI;UACrBtB,MAAM,CAACM,IAAI,EAAEgB,KAAK,CAAC;QACvB,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAG;EACbC,MAAM,EAAEpC,QAAQ;EAChBO,KAAK,EAAEP;AACX,CAAC"}