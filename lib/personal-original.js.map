{"version":3,"file":"personal-original.js","names":["PHRASE_TABLE","require","reporter","context","options","Syntax","getSource","RuleError","report","fixer","locator","ruleかな漢字書き","singleTokenRule","Paragraph","node","text","sentences","split","forEach","sentence","type","raw","length","ruleError","slice","start","loc","i","phrase","phrase_regex","re","RegExp","match","matchAll","padding","range","index","fix","replaceTextRange","Str","results","pushError","error","push","tokenize","then","tokens","token","module","exports","linter"],"sources":["../src/personal-original.js"],"sourcesContent":["import { tokenize } from \"kuromojin\";\r\nimport { split, Syntax } from \"sentence-splitter\";\r\nimport singleTokenRule from \"./rules/rule-define\"\r\nconst { PHRASE_TABLE } = require('./rules/phrase-table');\r\n\r\nconst reporter = (context, options = {}) => {\r\n    const { Syntax, getSource, RuleError, report, fixer, locator } = context;\r\n\r\n    // Only the first rule in `rule-define.js` is required, the other rules will be executed automatically.\r\n    const ruleかな漢字書き = singleTokenRule(context);\r\n\r\n    return {\r\n        [Syntax.Paragraph](node) {\r\n            const text = getSource(node);\r\n\r\n            // Check every sentences length.\r\n            var sentences = split(text);\r\n            sentences.forEach(sentence => {\r\n                if(sentence.type === \"Sentence\" && sentence.raw.length > 40){\r\n                    const ruleError = new RuleError(`1文長さが40文字超えている: ${sentence.raw.slice(0, 10) + '...'}`, {\r\n                        start: sentence.loc.start\r\n                    });\r\n                    report(node, ruleError); \r\n                }\r\n            });\r\n\r\n            // Replace forbidden phrases for the whole text using Regular Expression.\r\n            // Issue: Do not place the following code under sentence-splitter(leading space will be removed automatically)\r\n            for(var i = 0; i < PHRASE_TABLE.length; i++){\r\n                var phrase = PHRASE_TABLE[i]['forbidden_phrase'];\r\n                var phrase_regex = PHRASE_TABLE[i]['forbidden_regex'];\r\n                var re = new RegExp(phrase_regex, 'ig');\r\n\r\n                for (let match of text.matchAll(re)) {\r\n                    if (match) {\r\n                        report(\r\n                            node,\r\n                            new RuleError(`${PHRASE_TABLE[i]['warning_message']}: ${phrase}`, {\r\n                                padding: locator.range([match.index, match.index + phrase.length]),\r\n                                fix: fixer.replaceTextRange([match.index, match.index + phrase.length], PHRASE_TABLE[i]['preferred_phrase'])\r\n                            })\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        [Syntax.Str](node) {\r\n            const text = getSource(node);\r\n            const results = [];\r\n            const pushError = (error) => {\r\n                if (error) {\r\n                    results.push(error);\r\n                }\r\n            };\r\n\r\n            return tokenize(text).then((tokens) => {\r\n                tokens.forEach((token) => {\r\n                    pushError(ruleかな漢字書き(token));\r\n                });\r\n\r\n            }).then(()=> {\r\n                results.forEach(error => {\r\n                    report(node, error);\r\n                })\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nmodule.exports = {\r\n    linter: reporter,\r\n    fixer: reporter\r\n};"],"mappings":"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"}